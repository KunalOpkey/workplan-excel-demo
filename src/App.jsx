import { useState } from "react";



// âœ… Dummy task data

const initialTasks = [

 Â { id: 1, name: "Task 1", assigned: "Kunal", start: "2025-07-16", finish: "2025-07-21", level: 0 },
 Â { id: 2, name: "Subtask 1", assigned: "QA Team", start: "2025-07-18", finish: "2025-07-19", level: 1 },
 Â { id: 3, name: "Subtask 2", assigned: "Dev Team", start: "2025-07-19", finish: "2025-07-20", level: 1 },
 Â { id: 4, name: "Task 2", assigned: "Manager", start: "2025-07-22", finish: "2025-07-25", level: 0 }

];



export default function App() {

 Â // âœ… Tabs

 Â const tabs = [

 Â Â Â "Overview",
 Â Â Â "Dashboard",
 Â Â Â "List",
 Â Â Â "Gantt",
 Â Â Â "Board View",
 Â Â Â "Excel View",
 Â Â Â "Process Map",
 Â Â Â "Documents",
 Â Â Â "Test Cases",
 Â Â Â "Test Suites",
 Â Â Â "Test Run",
 Â Â Â "User Guide"
 Â ];

 Â const [activeTab, setActiveTab] = useState("Overview");

 Â // âœ… Excel View States

 Â const [selectedIndex, setSelectedIndex] = useState(null);
 Â const [tasks, setTasks] = useState(initialTasks);

 Â // âœ… Indent Logic

 Â const indentTask = (index) => {
 Â Â Â if (index === 0) return; // first task can't be indented
 Â Â Â let updated = [...tasks];
 Â Â Â updated[index].level = Math.min(updated[index].level + 1, updated[index - 1].level + 1);
 Â Â Â setTasks(updated);

 Â };

 Â // âœ… Outdent Logic

 Â const outdentTask = (index) => {
 Â Â Â let updated = [...tasks];
 Â Â Â updated[index].level = Math.max(updated[index].level - 1, 0);
 Â Â Â setTasks(updated);

 Â };



 Â // âœ… Disabling conditions

 Â const canIndent = () => {

 Â Â Â if (selectedIndex === null) return false;

 Â Â Â if (selectedIndex === 0) return false; // first task can't indent

 Â Â Â const current = tasks[selectedIndex];

 Â Â Â const prev = tasks[selectedIndex - 1];

 Â Â Â return current.level < prev.level + 1;

 Â };



 Â const canOutdent = () => {

 Â Â Â if (selectedIndex === null) return false;

 Â Â Â return tasks[selectedIndex].level > 0;

 Â };



 Â return (

 Â Â Â <div className="flex flex-col h-screen font-sans">

 Â Â Â Â Â {/* ðŸ”¹ TAB BAR */}

 Â Â Â Â Â <nav className="bg-gray-100 shadow p-2 flex flex-wrap gap-2">

 Â Â Â Â Â Â Â {tabs.map((tab) => (

 Â Â Â Â Â Â Â Â Â <button

 Â Â Â Â Â Â Â Â Â Â Â key={tab}

 Â Â Â Â Â Â Â Â Â Â Â onClick={() => setActiveTab(tab)}

 Â Â Â Â Â Â Â Â Â Â Â className={`px-4 py-2 rounded text-sm font-medium transition ${

 Â Â Â Â Â Â Â Â Â Â Â Â Â activeTab === tab

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ? "bg-blue-600 text-white shadow"

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â : "bg-white hover:bg-gray-200 text-gray-700"

 Â Â Â Â Â Â Â Â Â Â Â }`}

 Â Â Â Â Â Â Â Â Â >

 Â Â Â Â Â Â Â Â Â Â Â {tab}

 Â Â Â Â Â Â Â Â Â </button>

 Â Â Â Â Â Â Â ))}

 Â Â Â Â Â </nav>



 Â Â Â Â Â {/* ðŸ”¹ MAIN CONTENT */}

 Â Â Â Â Â <div className="flex-1 p-4 overflow-auto bg-gray-50">

 Â Â Â Â Â Â Â {activeTab === "Excel View" ? (

 Â Â Â Â Â Â Â Â Â <>

 Â Â Â Â Â Â Â Â Â Â Â <h1 className="text-xl font-bold mb-4">Excel View</h1>



 Â Â Â Â Â Â Â Â Â Â Â {/* âœ… Indent / Outdent Buttons */}

 Â Â Â Â Â Â Â Â Â Â Â <div className="flex gap-3 mb-4">

 Â Â Â Â Â Â Â Â Â Â Â Â Â <button

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â onClick={() => indentTask(selectedIndex)}

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â disabled={!canIndent()}

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â className="px-4 py-2 bg-green-600 text-white rounded disabled:bg-gray-400"

 Â Â Â Â Â Â Â Â Â Â Â Â Â >

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Indent âž¡

 Â Â Â Â Â Â Â Â Â Â Â Â Â </button>



 Â Â Â Â Â Â Â Â Â Â Â Â Â <button

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â onClick={() => outdentTask(selectedIndex)}

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â disabled={!canOutdent()}

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â className="px-4 py-2 bg-blue-600 text-white rounded disabled:bg-gray-400"

 Â Â Â Â Â Â Â Â Â Â Â Â Â >

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Outdent â¬…

 Â Â Â Â Â Â Â Â Â Â Â Â Â </button>

 Â Â Â Â Â Â Â Â Â Â Â </div>



 Â Â Â Â Â Â Â Â Â Â Â {/* âœ… Excel-like Grid */}

 Â Â Â Â Â Â Â Â Â Â Â <div className="border rounded shadow-sm bg-white">

 Â Â Â Â Â Â Â Â Â Â Â Â Â {/* Header Row */}

 Â Â Â Â Â Â Â Â Â Â Â Â Â <div className="grid grid-cols-4 bg-gray-200 font-semibold p-2 border-b">

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div>Milestone 01<div>

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div>Created By</div>


 Â Â Â Â Â Â Â Â Â Â Â Â Â </div>



 Â Â Â Â Â Â Â Â Â Â Â Â Â {/* Data Rows */}

 Â Â Â Â Â Â Â Â Â Â Â Â Â {tasks.map((task, idx) => (

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div

                 key={task.id}

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â className={`grid grid-cols-4 items-center p-2 border-b cursor-pointer ${

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â selectedIndex === idx ? "bg-blue-100" : "hover:bg-gray-50"

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }`}

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â onClick={() => setSelectedIndex(idx)}

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â >

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {/* âœ… Indentation padding */}

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div style={{ paddingLeft: `${task.level * 20}px` }}>

                   {task.Milestone 01}

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </div>

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div>{task.Created By}</div>

 Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </div>

 Â Â Â Â Â Â Â Â Â Â Â Â Â ))}

 Â Â Â Â Â Â Â Â Â Â Â </div>

 Â Â Â Â Â Â Â Â Â </>

 Â Â Â Â Â Â Â ) : (

 Â Â Â Â Â Â Â Â Â <div className="text-gray-600 text-lg">

 Â Â Â Â Â Â Â Â Â Â Â âœ… {activeTab} content coming soon...

 Â Â Â Â Â Â Â Â Â </div>

 Â Â Â Â Â Â Â )}

 Â Â Â Â Â </div>

 Â Â Â </div>

 Â );

}
